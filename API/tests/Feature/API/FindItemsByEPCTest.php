<?php

namespace Tests\Feature\API;

use Tests\TestCase;

class FindItemsByEPCTest extends TestCase
{
    /**
     * A basic test example.
     *
     * @return void
     */
    public function testFindItemsByEPCs()
    {
        $ids = collect(["7461676974726F2000000000", "A30A20130206000000000016", "A30A20130206000000000049", "A30A20130206000000000025", "A30A20130206000000000007", "A30A20130206000000000011", "A30A20130206000000000009", "A30A20130206000000000059", "E28011606000020728DD9412", "A30A20130206000000000017", "A30A20130206000000000071", "A30A20130206000000000043", "A30A20130206000000000026", "A30A20130206000000000031", "A30A20130206000000000003", "A30A20130206000000000078", "A30A20130206000000000041", "A41A2013051700000000021B", "A30A20130206000000000044", "A30A20130206000000000095", "A30A20130206000000000036", "A30A20130206000000000004", "A30A20130206000000000032", "A30A20130206000000000058", "A30A20130206000000000055", "A30A20130206000000000056", "A30A20130206000000000045", "A30A20130206000000000008", "A30A20130206000000000047", "A30A20130206000000000013", "A30A20130206000000000057", "A30A20130206000000000062", "A30A20130206000000000048", "A30A20130206000000000060", "A30A20130206000000000103", "A26A00000000000000000008", "A30A20130206000000000021", "A30A20130206000000000046", "A41A201305210000000003A7", "A30A20130206000000000033", "A30A20130206000000000030", "A30A20130206000000000042", "A30A20130206000000000038", "A30A20130206000000000054", "A30A20130206000000000020", "A30A20130206000000000018", "A30A20130206000000000034", "A30A20130206000000000039", "A30A20130206000000000050", "A30A20130206000000000006", "A30A20130206000000000002", "A41A20130521000000000850", "A41A20130517000000000504", "A30A20130206000000000014", "A30A20130206000000000029", "A30A20130206000000000037", "A30A20130206000000000023", "A30A20130206000000000024", "A30A20130206000000000035", "A30A20130206000000000065", "A30A20130206000000000027", "A41A201305210000000005FB", "A30A20130206000000000119", "A30A20130206000000000106", "A41A2013052100000000082F", "A41A20140130000000001459", "A30A20130206000000000076", "A30A20130206000000000105", "A30A20130206000000000019", "A30A20130206000000000068", "A30A20130206000000000081", "A30A20130206000000000012", "A30A20130206000000000073", "A30A20130206000000000077", "A30A20130206000000000083", "A30A20130206000000000079", "A30A20130206000000000115", "A30A20130206000000000086", "A41A2013051700000000073E", "A30A20130206000000000061", "A30A20130206000000000075", "A30A20130206000000000063", "A30A20130206000000000113", "A30A20130206000000000015", "A30A20130206000000000087", "A30A20130206000000000112", "A30A20130206000000000092", "A30A20130206000000000118", "A30A20130206000000000066", "A30A20130206000000000111", "A41A20130521000000000673", "A30A20130206000000000040", "A30A20130206000000000010", "A30A20130206000000000005", "A30A20130206000000000028", "A30A20130206000000000117", "A41A20130517000000000631", "A41A20130517000000000946", "A41A2013051700000000092B", "A41A2013052100000000050C", "A30A20130206000000000098", "A41A201305210000000001FB", "A30A20130206000000000096", "A30A20130206000000000084", "A41A20130517000000000A69", "A30A20130206000000000052", "A30A20130206000000000051", "A30A20130206000000000085", "A41A201305170000000001AA", "A30A20130206000000000001", "A41A201305210000000008D2", "A30A20130206000000000102", "A41A2013052100000000042A", "A41A201305170000000003C2", "300833B2DDD9014000000000", "A41A20130517000000000891", "A41A20130517000000000535", "A30A20130206000000000089", "A30A20130206000000000094", "A41A20130517000000000745", "A30A20130206000000000114", "A41A20130516000000000032", "A41A20130521000000000502", "A30A20130206000000000022"]);

        $start = microtime(true);
        $response = $this->post('api/items-by-epc', ["epcs" => $ids->all()]);
        $time = microtime(true) - $start;

        $validEpcs = $ids->filter(function ($e) {
            return starts_with($e, "A30A20130206");
        });

        $invalidEpcs = $ids->filter(function ($e) {
            return !starts_with($e, "A30A20130206");
        });

        $response->assertStatus(200);

        // Response structure and number of items
        $response->assertJsonStructure([
            "data" => [
                [
                    "cuid", "cycle_count", "remaining_lifetime", "label",
                    "product" => [
                        "cuid", "name", "label", "product_number", "expected_lifetime",
                        "product_type"],
                    "last_status" => ["cuid", "created_at", "updated_at", "status", "label"],
                    "location" => ["cuid", "created_at", "updated_at", "location_type", "label"]
                ]
            ],
            "error" => [
                "unknown_epcs"
            ]
        ]);

        $response->assertJsonCount(sizeof($validEpcs), 'data');
        $response->assertJsonCount(sizeof($invalidEpcs), 'error.unknown_epcs');

        // Performance
        $this->assertLessThan(0.5, $time, "Query is too slow!");
    }
}
